/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.76.0
  Forc version: 0.51.1
  Fuel-Core version: 0.22.1
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type StateInput = Enum<{ Uninitialized: [], Initialized: IdentityInput, Revoked: [] }>;
export type StateOutput = Enum<{ Uninitialized: [], Initialized: IdentityOutput, Revoked: [] }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type RawBytesInput = { ptr: BigNumberish, cap: BigNumberish };
export type RawBytesOutput = { ptr: BN, cap: BN };

export type SingleAssetTokenAbiConfigurables = {
  DECIMALS: BigNumberish;
  NAME: string;
  SYMBOL: string;
};

interface SingleAssetTokenAbiInterface extends Interface {
  functions: {
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    constructor: FunctionFragment;
    getBalance: FunctionFragment;
    getMsgSender: FunctionFragment;
    get_asset_id: FunctionFragment;
    heavyfn: FunctionFragment;
    transferTo: FunctionFragment;
    owner: FunctionFragment;
    burn: FunctionFragment;
    mint: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'decimals', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'name', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'symbol', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_assets', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'total_supply', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'constructor', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'getBalance', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'getMsgSender', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_asset_id', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'heavyfn', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'transferTo', values: [IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint', values: [IdentityInput, string, BigNumberish]): Uint8Array;

  decodeFunctionData(functionFragment: 'decimals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'name', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'symbol', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_assets', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'getBalance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'getMsgSender', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_asset_id', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'heavyfn', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transferTo', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'burn', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint', data: BytesLike): DecodedValue;
}

export class SingleAssetTokenAbi extends Contract {
  interface: SingleAssetTokenAbiInterface;
  functions: {
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    constructor: InvokeFunction<[owner_: IdentityInput], void>;
    getBalance: InvokeFunction<[target: ContractIdInput], BN>;
    getMsgSender: InvokeFunction<[], IdentityOutput>;
    get_asset_id: InvokeFunction<[], AssetIdOutput>;
    heavyfn: InvokeFunction<[asset: AssetIdInput], StdString>;
    transferTo: InvokeFunction<[to: IdentityInput, amount: BigNumberish], void>;
    owner: InvokeFunction<[], StateOutput>;
    burn: InvokeFunction<[sub_id: string, amount: BigNumberish], void>;
    mint: InvokeFunction<[recipient: IdentityInput, sub_id: string, amount: BigNumberish], void>;
  };
}
